<?xml version="1.0" encoding="UTF-8"?>
<!-- oracle configuration Created: 04.02.2014 : Mohamed ACHBANI -->
<oracle version="0.1">	
<db>
	<name>Buffer Cache Ratio Current</name>
	<sql>SELECT 'Cache Hit Ratio' as "Ratio", round(100*(1-(v3.value/ (v1.value + v2.value))),2) as "Value" FROM v$sysstat v1, v$sysstat v2, v$sysstat v3 where v1.name='db block gets' and v2.name='consistent gets' and v3.name='physical reads' UNION SELECT 'Miss Ratio' as "Ratio", round(100-(100*(1-(v3.value/ (v1.value + v2.value)))),2) as "Value" FROM v$sysstat v1, v$sysstat v2, v$sysstat v3 where v1.name='db block gets' and v2.name='consistent gets' and v3.name='physical reads'</sql>
</db>
	<name>Active User Programs</name>
	<sql>select decode(substr(program,instr(program,'(',1),2),'(P','Parallel Slaves','(J','Job Processes',program) "Active Program",count(*) as "Value" from (select s.sid, px.qcsid, s.serial#, s.status, s.program from v$session s, v$px_session px where s.sid=px.sid(+) and s.serial#=px.serial#(+) and s.type!='BACKGROUND' order by px.qcsid desc) where status='ACTIVE' group by decode(substr(program,instr(program,'(',1),2),'(P','Parallel Slaves','(J','Job Processes',program)</sql>
<db>
	<name>PGA Ratio</name>
	<sql>select 'PGA Hit Ratio' as "Ratio", value as "Value" from v$pgastat where name='cache hit percentage' union select 'PGA Miss Ratio' as "Ratio", 100-value  as "Value" from v$pgastat where name='cache hit percentage'</sql>
</db>	
<db>
	<name>Library Cache Ratio</name>
	<sql>select 'Library Cache Hit' as "Ratio", round(sum(c.pins)/(sum(c.pins)+sum(c.reloads))*100,2) as "Value" from v$librarycache c union select 'Library Cache Miss' as "Ratio", round(100-(sum(c.pins)/(sum(c.pins)+sum(c.reloads))*100),2) "Value" from v$librarycache c</sql>
</db>
<db>
	<name>Dictionary Cache Ratio</name>
	<sql>select 'Dictionary Cache Hit' as "Ratio", round(sum(r.gets-r.getmisses)/(sum(r.gets))*100,2) as "Value" from v$rowcache r union select 'Dictionary Cache Miss' as "Ratio", 100-(round(sum(r.gets-r.getmisses)/(sum(r.gets))*100,2)) as "Value" from v$rowcache r</sql>
</db>
<db>
	<name>Active vs. Inactive Sessions</name>
	<sql>select 'Active Sessions' as "Type", count(*) as "Value" from v$session s1 where status='ACTIVE' union select 'Inactive Sessions' as "Type", count(*) as "Value" from v$session where status !='ACTIVE'</sql>
</db>
<db>
	<name>Waits</name>
	<sql>select * from (select "Wait Class", "Waits", "Time Waited" from (select initcap(w.class) AS "Wait Class", nvl(sum(w.count),0) AS "Waits", nvl(sum(w.time),0) AS "Time Waited" from v$waitstat w group by initcap (w.class)) where "Waits" > 0 order by 2 desc) where rownum &#60; 7 order by "Time Waited" desc </sql>
</db>
<db>
	<name>Top Segments - Buffer Pool</name>
	<sql>select * from (select o.owner||'.'||o.object_name "Segment", count(1) "Buffer Count", round(((count (1) / (select count(*) from v$bh)) * 100),2) "Pct" from dba_objects o, v$bh bh where o.object_id = bh.objd group by owner, object_name order by count (1) desc) where rownum &#60; 20</sql>
</db>
<db>
	<name>Top Segments - IO</name>
	<sql>SELECT * FROM (SELECT "Segment", sum("Total Physical Reads") as "Phys Rds", sum("Total Logical Reads") as "Log Rds",sum("Total Physical Writes") as "Phys Wrts",sum("Total Block Changes") as "Blk Chgs" FROM (SELECT   o.owner || '.' || o.object_name AS "Segment",NVL (s.physical_reads_total, 0) AS "Total Physical Reads",NVL (s.logical_reads_total, 0) AS "Total Logical Reads",NVL (s.physical_writes_total, 0) AS "Total Physical Writes",NVL (s.db_block_changes_total, 0) AS "Total Block Changes", dhs.snap_id, dhs.end_interval_time FROM dba_hist_seg_stat s,dba_objects o, dba_hist_snapshot dhs, v$instance i WHERE s.obj# = o.object_id AND dhs.snap_id = s.snap_id AND dhs.instance_number = s.instance_number and dhs.instance_number = i.instance_number ORDER BY dhs.end_interval_time DESC, "Total Physical Reads" DESC, "Total Logical Reads" DESC, "Total Physical Writes" DESC) group by "Segment" order by 2 desc, 4 desc,5 desc, 3 desc) where rownum &#60; 13</sql>
</db>
<db>
	<name>Top Segments - IO - Dashboard</name>
	<sql>SELECT * FROM (SELECT "Segment", sum("Total Physical Reads") as "Phys Rds", sum("Total Logical Reads") as "Log Rds",sum("Total Physical Writes") as "Phys Wrts",sum("Total Block Changes") as "Blk Chgs" FROM (SELECT   o.owner || '.' || o.object_name AS "Segment",NVL (s.physical_reads_total, 0) AS "Total Physical Reads",NVL (s.logical_reads_total, 0) AS "Total Logical Reads",NVL (s.physical_writes_total, 0) AS "Total Physical Writes",NVL (s.db_block_changes_total, 0) AS "Total Block Changes", dhs.snap_id, dhs.end_interval_time FROM dba_hist_seg_stat s,dba_objects o, dba_hist_snapshot dhs, v$instance i WHERE s.obj# = o.object_id AND dhs.snap_id = s.snap_id AND dhs.instance_number = s.instance_number and dhs.instance_number = i.instance_number ORDER BY dhs.end_interval_time DESC, "Total Physical Reads" DESC, "Total Logical Reads" DESC, "Total Physical Writes" DESC) group by "Segment" order by 2 desc, 4 desc,5 desc, 3 desc) where rownum &#60; 6</sql>
</db>
<db>
	<name>Top SQL Operations</name>
	<sql>select * from (select s.operation || decode(s.options,'','',' ('||s.options||')') as "Operation", count(s.operation || s.options) as "Count", round((count(s.operation || s.options)/(select count(*) from dba_hist_sql_plan s2)*100)) as "Pct" from dba_hist_sql_plan s group by s.operation || decode(s.options,'','',' ('||s.options||')') order by 2 desc) where rownum &#60; 20</sql>
</db>
<db>
	<name>Physical Reads Over Time</name>
	<sql>select "Time","Physical Reads","Physical Read Requests" from (select phyrds.snap_id, phyrds."Time", phyrds."Physical Reads", phyrqs."Physical Read Requests" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'physical read IO requests',s.value)-lag(decode(s.stat_name,'physical read IO requests',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'physical read IO requests', value) else decode(s.stat_name,'physical read IO requests',s.value)-lag(decode(s.stat_name,'physical read IO requests',s.value),1,0) over (order by dhs.snap_id) end "Physical Read Requests" from dba_hist_sysstat s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('physical read IO requests') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) phyrqs,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'physical reads',s.value)-lag(decode(s.stat_name,'physical reads',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'physical reads', value) else decode(s.stat_name,'physical reads',s.value)-lag(decode(s.stat_name,'physical reads',s.value),1,0) over (order by dhs.snap_id) end "Physical Reads" from dba_hist_sysstat s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('physical reads') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc ) phyrds where phyrds.snap_id = phyrqs.snap_id order by phyrds.snap_id desc) where rownum  &#60;150 order by snap_id</sql>
</db>
<db>
	<name>Logins Over Time</name>
	<sql>select "Time","Logons Delta Cumulative", "Logons Delta Current" from (select s1.snap_id, s1."Time", s1."Logons Delta Current", s2."Logons Delta Cumulative" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'logons current',s.value)-lag(decode(s.stat_name,'logons current',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'logons current', value) else decode(s.stat_name,'logons current',s.value)-lag(decode(s.stat_name,'logons current',s.value),1,0) over (order by dhs.snap_id) end "Logons Delta Current" from dba_hist_sysstat s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('logons current') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s1,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'logons cumulative',s.value)-lag(decode(s.stat_name,'logons cumulative',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'logons cumulative', value) else decode(s.stat_name,'logons cumulative',s.value)-lag(decode(s.stat_name,'logons cumulative',s.value),1,0) over (order by dhs.snap_id) end "Logons Delta Cumulative" from dba_hist_sysstat s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('logons cumulative') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc ) s2 where s1.snap_id = s2.snap_id order by s1.snap_id desc) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>Top Tablespaces - Physical Reads</name>
	<sql>select "Tablespace", "Physical Reads" from (select t.name as "Tablespace", sum(phyrds) as "Physical Reads" from v$filestat f, v$datafile d, v$tablespace t where f.file# = d.file# and d.ts# = t.ts# group by t.name order by 2 desc) where rownum &#60; 8</sql>
</db>
<db>
	<name>Wait Events Current</name>
	<sql>select "Wait Event", "Wait Time" from (select replace(event,'&amp;','and') "Wait Event",time_waited "Wait Time" from v$system_event where event NOT IN ('resmgr:cpu quantum','Streams AQ: qmn coordinator waiting for slave to start','dispatcher timer','lock element cleanup','Null event','parallel query dequeue wait','parallel query idle wait - Slaves','pipe get','PL/SQL lock timer','pmon timer','rdbms ipc message','slave wait','smon timer','SQL*Net break/reset to client','SQL*Net message from client','SQL*Net message to client','SQL*Net more data to client','virtual circuit status','WMON goes to sleep') AND event NOT LIKE 'DFS%' AND event NOT LIKE '%done%' AND event NOT LIKE '%Idle%' AND event NOT LIKE 'KXFX%' and wait_class !='Idle') order by 2 desc</sql>
</db>
<db>
	<name>Wait Classes Current</name>
	<sql>select  WAIT_CLASS as "Wait Class", TIME_WAITED as "Time Waited" from (select WAIT_CLASS,TOTAL_WAITS,TIME_WAITED from  V$SYSTEM_WAIT_CLASS where WAIT_CLASS != 'Idle'), (select sum(TOTAL_WAITS) SUM_WAITS, sum(TIME_WAITED) SUM_TIME from V$SYSTEM_WAIT_CLASS where WAIT_CLASS != 'Idle') order by 2 desc</sql>
</db>
<db>
	<name>Top Segments - Buffer Busy Waits</name>
	<sql>select "Segment","Buffer Busy Waits" from (select owner ||'.'||object_name "Segment", sum(value) as "Buffer Busy Waits" from v$segment_statistics where statistic_name='buffer busy waits' group by owner ||'.'||object_name having (sum(value)>0)) where rownum  &#60; 21 order by 2 desc</sql>
</db>
<db>
	<name>Redo Over Time</name>
	<sql>select "Time","Redo Size","Redo Blocks Written" from (select s1.snap_id, s1."Time", s1."Redo Size", s2."Redo Blocks Written" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'redo size',s.value)-lag(decode(s.stat_name,'redo size',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'redo size', value) else decode(s.stat_name,'redo size',s.value)-lag(decode(s.stat_name,'redo size',s.value),1,0) over (order by dhs.snap_id) end "Redo Size" from dba_hist_sysstat s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('redo size') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s1,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'redo blocks written',s.value)-lag(decode(s.stat_name,'redo blocks written',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'redo blocks written', value) else decode(s.stat_name,'redo blocks written',s.value)-lag(decode(s.stat_name,'redo blocks written',s.value),1,0) over (order by dhs.snap_id) end "Redo Blocks Written" from dba_hist_sysstat s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('redo blocks written') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc ) s2 where s1.snap_id = s2.snap_id order by s1.snap_id desc) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>Physical Reads/Writes Per Second Over Time</name>
	<sql>select s1."Time",s1."Physical Reads Per Sec", s2."Physical Writes Per Sec" from (select snap_id, "Time", "Physical Reads Per Sec" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Physical Reads Per Sec" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Physical Reads Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s1,(select snap_id, "Time", "Physical Writes Per Sec" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Physical Writes Per Sec" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Physical Writes Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s2 where s1.snap_id = s2.snap_id and rownum &#60; 150 order by s1.snap_id </sql>
</db>
<db>
	<name>Sorts (Memory) Over Time</name>
	<sql>select "Time", "Sorts In Memory" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'sorts (memory)',s.value)-lag(decode(s.stat_name,'sorts (memory)',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'sorts (memory)', value) else decode(s.stat_name,'sorts (memory)',s.value)-lag(decode(s.stat_name,'sorts (memory)',s.value),1,0) over (order by dhs.snap_id) end "Sorts In Memory" from dba_hist_sysstat s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('sorts (memory)') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc ) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>SGA Free Memory Over Time</name>
	<sql>select "Time", "SGA Free Memory" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(bytes)/1024/1024) "SGA Free Memory" from dba_hist_sgastat s, dba_hist_snapshot dhs, v$instance i where s.name in ('free memory') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc ) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>Buffer Cache Ratio Over Time</name>
	<sql>select "Time", "Buffer Cache Hit Ratio" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Buffer Cache Hit Ratio" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Buffer Cache Hit Ratio') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc ) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>PGA Hit Ratio Over Time</name>
	<sql>select "Time", "PGA Hit Ratio" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "PGA Hit Ratio" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('PGA Cache Hit %') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc ) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>OS Load Over Time</name>
	<sql>select "Time", "OS Load" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(s.value,2) "OS Load" from dba_hist_osstat s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('LOAD') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc ) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>Logs Archived Over Time</name>
	<sql>select "Time", "Number of Archived Logs" from (select to_char(completion_time,'MM/DD') "Time", count(recid) "Number of Archived Logs" from v$archived_log where standby_dest='NO' group by to_char(completion_time,'MM/DD') order by to_char(completion_time,'MM/DD') desc) where rownum &#60; 20 order by "Time" asc</sql>
</db>
<db>
	<name>File Read Wait Events Over Time</name>
	<sql>select "Time","DB File Sequential Read Waits","DB File Scattered Read Waits" from (select s1.snap_id, s1."Time", s1."DB File Sequential Read Waits", s2."DB File Scattered Read Waits" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.event_name,'db file sequential read',total_waits)-lag(decode(s.event_name,'db file sequential read',s.total_waits),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.event_name,'db file sequential read', s.total_waits) else decode(s.event_name,'db file sequential read',s.total_waits)-lag(decode(s.event_name,'db file sequential read',s.total_waits),1,0) over (order by dhs.snap_id) end "DB File Sequential Read Waits" from dba_hist_system_event s, dba_hist_snapshot dhs, v$instance i where s.event_name in ('db file sequential read') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s1,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.event_name,'db file scattered read',s.total_waits)-lag(decode(s.event_name,'db file scattered read',s.total_waits),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.event_name,'db file scattered read', s.total_waits) else decode(s.event_name,'db file scattered read',s.total_waits)-lag(decode(s.event_name,'db file scattered read',s.total_waits),1,0) over (order by dhs.snap_id) end "DB File Scattered Read Waits" from dba_hist_system_event s, dba_hist_snapshot dhs, v$instance i where s.event_name in ('db file scattered read') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc ) s2 where s1.snap_id = s2.snap_id order by s1.snap_id desc) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>Session Long Operations</name>
	<sql>select '('||sid||','||serial#||')'||' '||opname||' ' "Operation", round((elapsed_seconds)/60) as "Elapsed Minutes",round((time_remaining/60)) as "Minutes Remaining" from v$session_longops where time_remaining !=0 and time_remaining != elapsed_seconds</sql>
</db>
<db>
	<name>Buffer Cache Ratio Current - Dashboard</name>
	<sql>SELECT 'Hit Ratio' as "Ratio", round(100*(1-(v3.value/ (v1.value + v2.value))),2) as "Value" FROM v$sysstat v1, v$sysstat v2, v$sysstat v3 where v1.name='db block gets' and v2.name='consistent gets' and v3.name='physical reads' UNION SELECT 'Miss Ratio' as "Ratio", round(100-(100*(1-(v3.value/ (v1.value + v2.value)))),2) as "Value" FROM v$sysstat v1, v$sysstat v2, v$sysstat v3 where v1.name='db block gets' and v2.name='consistent gets' and v3.name='physical reads'</sql>
</db>
<db>
	<name>Library Cache Ratio - Dashboard</name>
	<sql>select 'Hit Ratio' as "Ratio", round(sum(c.pins)/(sum(c.pins)+sum(c.reloads))*100,2) as "Value" from v$librarycache c union select 'Miss Ratio' as "Ratio", round(100-(sum(c.pins)/(sum(c.pins)+sum(c.reloads))*100),2) "Value" from v$librarycache c</sql>
</db>
<db>
	<name>Dictionary Cache Ratio - Dashboard</name>
	<sql>select 'Hit Ratio' as "Ratio", round(sum(r.gets-r.getmisses)/(sum(r.gets))*100,2) as "Value" from v$rowcache r union select 'Miss Ratio' as "Ratio", 100-(round(sum(r.gets-r.getmisses)/(sum(r.gets))*100,2)) as "Value" from v$rowcache r</sql>
</db>
<db>
	<name>PGA Ratio - Dashboard</name>
	<sql>select 'Hit Ratio' as "Ratio", value as "Value" from v$pgastat where name='cache hit percentage' union select 'Miss Ratio' as "Ratio", 100-value  as "Value" from v$pgastat where name='cache hit percentage'</sql>
</db>
<db>
	<name>CPU Utilization Over Time - Dashboard</name>
	<sql>select "Time","CPU Utilization Pct" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(average,2) as "CPU Utilization Pct" from dba_hist_sysmetric_summary dhss, dba_hist_snapshot dhs, v$instance i where dhs.snap_id = dhss.snap_id and dhs.instance_number = dhss.instance_number and i.instance_number = dhs.instance_number and metric_name in ('Host CPU Utilization (%)') order by dhs.snap_id desc) where rownum &#60; 11 order by snap_id</sql>
</db>
<db>	
	<name>System Time Model Over Time - Dashboard</name>
	<sql> select "Time","SQL Execute"/1000000 as "SQL Execute","Parse"/1000000 as "Parse", "DB CPU"/1000000 as "DB CPU","Hard Parse"/1000000 as "Hard Parse", "PLSQL Execute"/1000000 as "PL/SQL Execute","Rman CPU"/1000000 as "RMAN CPU","Background CPU"/1000000 as "Background CPU" from (select s1.snap_id, s1."Time", s1."SQL Execute", s2."Parse", s3."DB CPU", s4."Hard Parse",s5."PLSQL Execute",s6."Rman CPU",s7."Background CPU" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'sql execute elapsed time',s.value)-lag(decode(s.stat_name,'sql execute elapsed time',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'sql execute elapsed time', value) else decode(s.stat_name,'sql execute elapsed time',s.value)-lag(decode(s.stat_name,'sql execute elapsed time',s.value),1,0) over (order by dhs.snap_id) end "SQL Execute" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('sql execute elapsed time') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s1,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'parse time elapsed',s.value)-lag(decode(s.stat_name,'parse time elapsed',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'parse time elapsed', value) else decode(s.stat_name,'parse time elapsed',s.value)-lag(decode(s.stat_name,'parse time elapsed',s.value),1,0) over (order by dhs.snap_id) end "Parse" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('parse time elapsed') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc ) s2,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'DB CPU',s.value)-lag(decode(s.stat_name,'DB CPU',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'DB CPU', value) else decode(s.stat_name,'DB CPU',s.value)-lag(decode(s.stat_name,'DB CPU',s.value),1,0) over (order by dhs.snap_id) end "DB CPU" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('DB CPU') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s3,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'hard parse elapsed time',s.value)-lag(decode(s.stat_name,'hard parse elapsed time',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'hard parse elapsed time', value) else decode(s.stat_name,'hard parse elapsed time',s.value)-lag(decode(s.stat_name,'hard parse elapsed time',s.value),1,0) over (order by dhs.snap_id) end "Hard Parse" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('hard parse elapsed time') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s4,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'PL/SQL execution elapsed time',s.value)-lag(decode(s.stat_name,'PL/SQL execution elapsed time',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'PL/SQL execution elapsed time', value) else decode(s.stat_name,'PL/SQL execution elapsed time',s.value)-lag(decode(s.stat_name,'PL/SQL execution elapsed time',s.value),1,0) over (order by dhs.snap_id) end "PLSQL Execute" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('PL/SQL execution elapsed time') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s5,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'RMAN cpu time (backup/restore)',s.value)-lag(decode(s.stat_name,'RMAN cpu time (backup/restore)',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'RMAN cpu time (backup/restore)', value) else decode(s.stat_name,'RMAN cpu time (backup/restore)',s.value)-lag(decode(s.stat_name,'RMAN cpu time (backup/restore)',s.value),1,0) over (order by dhs.snap_id) end "Rman CPU" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('RMAN cpu time (backup/restore)') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s6, (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'background cpu time',s.value)-lag(decode(s.stat_name,'background cpu time',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'background cpu time', value) else decode(s.stat_name,'background cpu time',s.value)-lag(decode(s.stat_name,'background cpu time',s.value),1,0) over (order by dhs.snap_id) end "Background CPU" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('background cpu time') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s7 where s1.snap_id = s2.snap_id and s1.snap_id = s3.snap_id and s1.snap_id = s4.snap_id and s1.snap_id = s5.snap_id and s1.snap_id = s6.snap_id and s1.snap_id = s7.snap_id order by s1.snap_id desc) where rownum &#60; 11 order by snap_id</sql>
</db>
<db>
	<name>System Time Model Current - Dashboard</name>
	<sql>select stat_name "Statistic",round((value/1000000)/60,2) as "Minutes" from v$sys_time_model where round((value/1000000)/60,2) > 0</sql>
</db>
<db>
	<name>Active User Programs - Dashboard</name>
	<sql>select nvl(decode(substr(program,instr(program,'(',1),2),'(P','parallel slave','(J','job process',substr(program, 1,instr(program,'@')-1)), program) "Active Program",count(*) as "Value" from (select s.sid, px.qcsid, s.serial#, s.status, s.program from v$session s, v$px_session px where s.sid=px.sid(+) and s.serial#=px.serial#(+) and s.type!='BACKGROUND' order by px.qcsid desc) where status='ACTIVE' group by nvl(decode(substr(program,instr(program,'(',1),2),'(P','parallel slave','(J','job process',substr(program, 1,instr(program,'@')-1)), program)</sql>
</db>
<db>
	<name>Physical Reads/Writes Per Second Over Time - Dashboard</name>
	<sql>select s1."Time",s1."Physical Reads Per Sec", s2."Physical Writes Per Sec" from (select snap_id, "Time", "Physical Reads Per Sec" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Physical Reads Per Sec" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Physical Reads Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s1,(select snap_id, "Time", "Physical Writes Per Sec" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Physical Writes Per Sec" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Physical Writes Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s2 where s1.snap_id = s2.snap_id and rownum &#60; 11 order by s1.snap_id </sql>
</db>
<db>
	<name>System Time Model Over Time</name>
	<sql> select "Time","SQL Execute"/1000000 as "SQL Execute","Parse"/1000000 as "Parse", "DB CPU"/1000000 as "DB CPU","Hard Parse"/1000000 as "Hard Parse", "PLSQL Execute"/1000000 as "PL/SQL Execute","Rman CPU"/1000000 as "RMAN CPU","Background CPU"/1000000 as "Background CPU" from (select s1.snap_id, s1."Time", s1."SQL Execute", s2."Parse", s3."DB CPU", s4."Hard Parse",s5."PLSQL Execute",s6."Rman CPU",s7."Background CPU" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'sql execute elapsed time',s.value)-lag(decode(s.stat_name,'sql execute elapsed time',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'sql execute elapsed time', value) else decode(s.stat_name,'sql execute elapsed time',s.value)-lag(decode(s.stat_name,'sql execute elapsed time',s.value),1,0) over (order by dhs.snap_id) end "SQL Execute" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('sql execute elapsed time') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s1,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'parse time elapsed',s.value)-lag(decode(s.stat_name,'parse time elapsed',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'parse time elapsed', value) else decode(s.stat_name,'parse time elapsed',s.value)-lag(decode(s.stat_name,'parse time elapsed',s.value),1,0) over (order by dhs.snap_id) end "Parse" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('parse time elapsed') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc ) s2,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'DB CPU',s.value)-lag(decode(s.stat_name,'DB CPU',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'DB CPU', value) else decode(s.stat_name,'DB CPU',s.value)-lag(decode(s.stat_name,'DB CPU',s.value),1,0) over (order by dhs.snap_id) end "DB CPU" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('DB CPU') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s3,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'hard parse elapsed time',s.value)-lag(decode(s.stat_name,'hard parse elapsed time',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'hard parse elapsed time', value) else decode(s.stat_name,'hard parse elapsed time',s.value)-lag(decode(s.stat_name,'hard parse elapsed time',s.value),1,0) over (order by dhs.snap_id) end "Hard Parse" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('hard parse elapsed time') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s4,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'PL/SQL execution elapsed time',s.value)-lag(decode(s.stat_name,'PL/SQL execution elapsed time',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'PL/SQL execution elapsed time', value) else decode(s.stat_name,'PL/SQL execution elapsed time',s.value)-lag(decode(s.stat_name,'PL/SQL execution elapsed time',s.value),1,0) over (order by dhs.snap_id) end "PLSQL Execute" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('PL/SQL execution elapsed time') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s5,(select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'RMAN cpu time (backup/restore)',s.value)-lag(decode(s.stat_name,'RMAN cpu time (backup/restore)',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'RMAN cpu time (backup/restore)', value) else decode(s.stat_name,'RMAN cpu time (backup/restore)',s.value)-lag(decode(s.stat_name,'RMAN cpu time (backup/restore)',s.value),1,0) over (order by dhs.snap_id) end "Rman CPU" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('RMAN cpu time (backup/restore)') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s6, (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", case when decode(s.stat_name,'background cpu time',s.value)-lag(decode(s.stat_name,'background cpu time',s.value),1,0) over (order by dhs.snap_id) &#60; 0 then decode(s.stat_name,'background cpu time', value) else decode(s.stat_name,'background cpu time',s.value)-lag(decode(s.stat_name,'background cpu time',s.value),1,0) over (order by dhs.snap_id) end "Background CPU" from dba_hist_sys_time_model s, dba_hist_snapshot dhs, v$instance i where s.stat_name in ('background cpu time') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number order by dhs.snap_id desc) s7 where s1.snap_id = s2.snap_id and s1.snap_id = s3.snap_id and s1.snap_id = s4.snap_id and s1.snap_id = s5.snap_id and s1.snap_id = s6.snap_id and s1.snap_id = s7.snap_id order by s1.snap_id desc) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>	
	<name>CPU Utilization Over Time</name>
	<sql>select "Time","CPU Utilization Pct" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(average,2) as "CPU Utilization Pct" from dba_hist_sysmetric_summary dhss, dba_hist_snapshot dhs, v$instance i where dhs.snap_id = dhss.snap_id and dhs.instance_number = dhss.instance_number and i.instance_number = dhs.instance_number and metric_name in ('Host CPU Utilization (%)') order by dhs.snap_id desc) where rownum &#60; 150 order by snap_id</sql>
</db>
<db>
	<name>System Time Model Current</name>
	<sql>select stat_name "Statistic",round((value/1000000)/60,2) as "Minutes" from v$sys_time_model where round((value/1000000)/60,2) > 0</sql>
</db>
<db>
	<name>Wait Events Current - Dashboard</name>
	<sql>select "Wait Event", "Wait Time" from (select replace(event,'&amp;','and') "Wait Event",time_waited "Wait Time" from v$system_event where event NOT IN ('resmgr:cpu quantum','Streams AQ: qmn coordinator waiting for slave to start','dispatcher timer','lock element cleanup','Null event','parallel query dequeue wait','parallel query idle wait - Slaves','pipe get','PL/SQL lock timer','pmon timer','rdbms ipc message','slave wait','smon timer','SQL*Net break/reset to client','SQL*Net message from client','SQL*Net message to client','SQL*Net more data to client','virtual circuit status','WMON goes to sleep') AND event NOT LIKE 'DFS%' AND event NOT LIKE '%done%' AND event NOT LIKE '%Idle%' AND event NOT LIKE 'KXFX%' and wait_class !='Idle') order by 2 desc</sql>
</db>
<db>
	<name>Wait Classes Current - Dashboard</name>
	<sql>select  WAIT_CLASS as "Wait Class", TIME_WAITED as "Time Waited" from (select WAIT_CLASS,TOTAL_WAITS,TIME_WAITED from  V$SYSTEM_WAIT_CLASS where WAIT_CLASS != 'Idle'), (select sum(TOTAL_WAITS) SUM_WAITS, sum(TIME_WAITED) SUM_TIME from V$SYSTEM_WAIT_CLASS where WAIT_CLASS != 'Idle') order by 2 desc</sql>
</db>
<db>
	<name>DB Space - Dashboard</name>
	<sql>select 'Space' as "Space", s2."Used", s1."Free",s3."Total"-s1."Free"-s2."Used" as "Extend" from (select round(sum(bytes)/1024/1024/1024,2) as "Free" from dba_free_space) s1,(select round((a.data_size+b.temp_size)/1024/1024/1024,2)-(select round(sum(bytes)/1024/1024/1024,2) from dba_free_space) as "Used" from (select nvl(sum(bytes),0) data_size from dba_data_files ) a, (select nvl(sum(bytes),0) temp_size from dba_temp_files ) b) s2,(select round(((select sum(decode(autoextensible,'YES',maxbytes,bytes)) from dba_data_files)+(select sum(decode(autoextensible,'YES',maxbytes,bytes)) from dba_temp_files))/1024/1024/1024,2) as "Total" from dual) s3</sql>
</db>
<db>
	<name>Active vs. Inactive Sessions - Dashboard</name>
	<sql>select 'Sessions',(select count(*) as "Active" from v$session s1 where status='ACTIVE') as "Active", (select count(*) as "Inactive" from v$session where status !='ACTIVE') as "Inactive" from dual</sql>
</db>
<db>
	<name>SGA Memory - Dashboard</name>
	<sql>select initcap(component) as "Component", current_size/1024/1024 as "Used" from v$sga_dynamic_components where current_size !=0 order by 2 desc</sql>
</db>
<db>	
	<name>Logons and Transactions Over Time - Dashboard</name>
	<sql>select s1."Time",s2."User Transactions", s1."Logons" from (select snap_id, "Time", "Logons" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average)*60,2) "Logons" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Logons Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s1,(select snap_id, "Time", "User Transactions" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average)*60,2) "User Transactions" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('User Transaction Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s2 where s1.snap_id = s2.snap_id and rownum &#60; 11 order by s1.snap_id</sql>
</db>
<db>	<name>Logons and Transactions Over Time</name>
	<sql>select s1."Time",s2."User Transactions", s1."Logons" from (select snap_id, "Time", "Logons" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average)*60,2) "Logons" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Logons Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s1,(select snap_id, "Time", "User Transactions" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average)*60,2) "User Transactions" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('User Transaction Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s2 where s1.snap_id = s2.snap_id and rownum &#60; 150 order by s1.snap_id</sql>
</db>
<db>	
	<name>Consistent Gets and Logical Reads Over Time - Dashboard</name>
	<sql>select s1."Time",s2."Logical Reads", s1."Consistent Gets" from (select snap_id, "Time", "Consistent Gets" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Consistent Gets" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Consistent Read Gets Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s1,(select snap_id, "Time", "Logical Reads" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Logical Reads" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Logical Reads Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s2 where s1.snap_id = s2.snap_id and rownum &#60; 11 order by s1.snap_id</sql>
</db>
<db>
	<name>Consistent Gets and Logical Reads Over Time</name>
	<sql>select s1."Time",s2."Logical Reads", s1."Consistent Gets" from (select snap_id, "Time", "Consistent Gets" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Consistent Gets" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Consistent Read Gets Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s1,(select snap_id, "Time", "Logical Reads" from (select dhs.snap_id, '('||dhs.snap_id||') '||to_char(dhs.end_interval_time, 'MM/DD HH24:MI') as "Time", round(sum(average),2) "Logical Reads" from dba_hist_sysmetric_summary s, dba_hist_snapshot dhs, v$instance i where s.metric_name in ('Logical Reads Per Sec') and s.snap_id = dhs.snap_id and s.instance_number = dhs.instance_number and i.instance_number = dhs.instance_number group by dhs.snap_id, dhs.end_interval_time order by dhs.snap_id desc )) s2 where s1.snap_id = s2.snap_id and rownum &#60; 15050505050 order by s1.snap_id</sql>
</db>
<!-- add the same DB section for the next database -->		
</oracle>